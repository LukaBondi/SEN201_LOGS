[MASTER]
# Python code to execute, usually for sys.path manipulation such as pygtk.require().
#init-hook=

# Pickle collected data for later comparisons.
persistent=yes

# Use multiple processes to speed up Pylint.
jobs=1

# When enabled, pylint would attempt to guess common misconfiguration and emit user-friendly hints instead of false-positive error messages.
# suggestion-mode=yes

[MESSAGES CONTROL]
# Disable the message, report, category or checker with the given id(s).
disable=raw-checker-failed,
        bad-inline-option,
        locally-disabled,
        file-ignored,
        suppressed-message,
        useless-suppression,
        deprecated-pragma,
        use-symbolic-message-instead

[REPORTS]
# Set the output format. Available formats are text, parseable, colorized, json and msvs (visual studio).
output-format=text

# Include message's id in output
# include-ids=no

# Include symbolic ids of messages in output
# symbols=no

# Put messages in a separate file for each module / package specified on the command line instead of printing them on stdout.
# files-output=no

# Tells whether to display a full report or only the messages.
reports=no

# Python expression which should return a score less than or equal to 10.
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

[REFACTORING]
# Maximum number of nested blocks for function / method body
max-nested-blocks=5

# Complete name of functions that never returns.
never-returning-functions=sys.exit,argparse.parse_error

[BASIC]
# Naming style matching your coding standards
argument-naming-style=camelCase
attr-naming-style=camelCase
class-attribute-naming-style=any
class-const-naming-style=UPPER_CASE
class-naming-style=PascalCase
const-naming-style=UPPER_CASE
function-naming-style=camelCase
inlinevar-naming-style=any
method-naming-style=camelCase
module-naming-style=PascalCase
variable-naming-style=camelCase

# Good variable names which should always be accepted, separated by a comma.
good-names=i,j,k,ex,Run,_

# Bad variable names which should always be refused, separated by a comma.
bad-names=foo,bar,baz,toto,tutu,tata

# Colon-delimited sets of names that determine each other's naming style when the name regexes allow several styles.
name-group=

# Include a hint for the correct naming format with invalid-name.
include-naming-hint=no

[FORMAT]
# Maximum number of characters on a single line (updated to 100 characters).
max-line-length=100

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Allow the body of an if to be on the same line as the test if there is no else.
single-line-if-stmt=no

# Allow the body of a class to be on the same line as the declaration if body contains single statement.
single-line-class-stmt=no

# Maximum number of lines in a module.
max-module-lines=1000

# String used as indentation unit (4 spaces per your coding standards).
indent-string='    '

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=4

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format=

[LOGGING]
# The type of string formatting that logging methods do.
logging-format-style=old

# Logging modules to check that the string format arguments are in logging function parameter format.
logging-modules=logging

[MISCELLANEOUS]
# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO

# Regular expression of note tags to take in consideration.
#notes-rgx=

[SIMILARITIES]
# Minimum lines number of a similarity.
min-similarity-lines=4

# Comments are removed from the similarity computation
ignore-comments=yes

# Docstrings are removed from the similarity computation
ignore-docstrings=yes

# Imports are removed from the similarity computation
ignore-imports=no

# Signatures are removed from the similarity computation
ignore-signatures=no

[SPELLING]
# Spelling dictionary name.
spelling-dict=

# List of comma separated words that should not be checked.
spelling-ignore-words=

# A path to a file that contains the private dictionary; one word per line.
spelling-private-dict-file=

# Tells whether to store unknown words to the private dictionary.
spelling-store-unknown-words=no

[TYPECHECK]
# List of decorators that produce context managers, such as contextlib.contextmanager.
contextmanager-decorators=contextlib.contextmanager

# List of members which are set dynamically and missed by pylint inference system.
generated-members=

# Tells whether missing members accessed in mixin class should be ignored.
ignore-mixin-members=yes

# Tells whether to warn about missing members when the owner of the attribute is inferred to be None.
ignore-none=yes

# This flag controls whether pylint should warn about no-member and similar checks whenever an opaque object is returned when inferring.
ignore-on-opaque-inference=yes

# List of class names for which member attributes should not be checked.
ignored-classes=optparse.Values,thread._local,_thread._local

# List of module names for which member attributes should not be checked
ignored-modules=

# Show a hint with the correct callable when the callable raises a TypeError.
missing-member-hint=yes

# The minimum edit distance a name should have in order to be considered a similar match for a missing member name.
missing-member-hint-distance=1

# The total number of similar names that should be taken in consideration when showing a hint for a missing member.
missing-member-max-choices=1

# Regex pattern to define which classes are considered mixins if ignore-mixin-members is set to 'yes'
mixin-class-rgx=.*[Mm]ixin

[VARIABLES]
# List of additional names supposed to be defined in builtins.
additional-builtins=

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables=yes

# List of names allowed to shadow builtins
allowed-redefined-builtins=

# List of strings which can identify a callback function by name.
callbacks=cb_,_cb

# A regular expression matching the name of dummy variables (i.e. expected to not be used).
dummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_

# Argument names that match this expression will be ignored.
ignored-argument-names=_.*|^ignored_|^unused_

# Tells whether we should check for unused import in __init__ files.
init-import=no

# List of qualified module names which can have objects that can redefine builtins.
redefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io

[CLASSES]
# Warn about protected attribute access inside special methods
check-protected-access-in-special-methods=no

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp,__post_init__

# List of member names, which should be excluded from the protected access warning.
exclude-protected=_asdict,_fields,_replace,_source,_make

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=cls

[DESIGN]
# Maximum number of arguments for function / method.
max-args=5

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr=5

# Maximum number of branch for function / method body.
max-branches=12

# Maximum number of locals for function / method body.
max-locals=15

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of public methods for a class (see R0904).
max-public-methods=20

# Maximum number of return / yield for function / method body.
max-returns=6

# Maximum number of statements in function / method body (approximately 60 lines as per your standards).
max-statements=60

# Minimum number of public methods for a class (see R0903).
min-public-methods=2

[IMPORTS]
# List of modules that can be imported at any level, not just the top level
allow-any-import-level=

# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all=no

# Analyse import fallback blocks. This can be used to support both Python 2 and 3 compatible code, which means that the block might have code that exists only in one or the other interpreter, leading to false positives when analysed.
analyse-fallback-blocks=no

# Deprecated modules which should not be used, separated by a comma.
deprecated-modules=

# Output a graph (.gv or any supported image format) of external dependencies to the given file (report RP0402 must not be disabled).
ext-import-graph=

# Output a graph (.gv or any supported image format) of all (i.e. internal and external) dependencies to the given file (report RP0402 must not be disabled).
import-graph=

# Output a graph (.gv or any supported image format) of internal dependencies to the given file (report RP0402 must not be disabled).
int-import-graph=

# Force import order to recognize a module as part of the standard compatibility libraries.
known-standard-library=

# Force import order to recognize a module as part of a third party library.
known-third-party=enchant

# Couples of modules and preferred modules, separated by a comma.
preferred-modules=

[EXCEPTIONS]
# Exceptions that will emit a warning when being caught.
overgeneral-exceptions=builtins.BaseException,builtins.Exception